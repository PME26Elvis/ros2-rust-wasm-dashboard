name: ros2-demo
on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  demo-humble:
    runs-on: ubuntu-22.04
    env:
      # 預設用 Fast DDS；需要改 CycloneDDS 再把這行改成 rmw_cyclonedds_cpp
      RMW_IMPLEMENTATION: rmw_fastrtps_cpp

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ROS 2 APT repo & install Humble + message pkgs + RMWs
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
            | sudo gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
            http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" \
            | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y \
            ros-humble-ros-base \
            ros-humble-example-interfaces \
            ros-humble-test-msgs \
            ros-humble-rmw-fastrtps-cpp \
            ros-humble-rmw-cyclonedds-cpp

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Ensure cargo on PATH
        shell: bash
        run: echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Build & run demo (single step; count-based success)
        shell: bash
        working-directory: crates/ros2_demo
        run: |
          # 嚴謹模式：先別開 -u，避免 setup.bash 因未定義變數中止
          set -eo pipefail

          # 先建立 log 檔，確保 artifacts 一定有檔可收
          : > build.log; : > pub.log; : > sub.log

          # source 之前暫關 -u，source 完再開
          set +u
          source /opt/ros/humble/setup.bash
          set -u

          echo "Using RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION}"

          cargo build --release | tee -a build.log

          # 啟動 publisher（背景）
          ./target/release/minimal_pub > pub.log 2>&1 & PUBPID=$!

          # 任何狀況都要清掉背景行程
          cleanup() { kill "$PUBPID" 2>/dev/null || true; }
          trap cleanup EXIT

          # 稍等 publisher 起來
          sleep 2

          # 跑 subscriber，無論 timeout 與否都不讓這行影響整個 step 的退出狀態
          set -o pipefail
          timeout 40s ./target/release/minimal_sub | tee -a sub.log || true

          # 用 log 行數作為唯一成功條件
          COUNT=$(grep -c "hello from rclrs" sub.log || true)
          echo "Received $COUNT messages"
          if [ "$COUNT" -lt 5 ]; then
            echo "Too few messages: $COUNT"
            exit 100
          fi
          # 成功路徑：顯式 exit 0（不受 subscriber 的退出碼影響）
          exit 0

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ros2-demo-logs-humble
          path: crates/ros2_demo/*.log
